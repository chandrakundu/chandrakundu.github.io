<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>Python - Category - Chandra Kundu | Personal Website</title>
    <link>https://chandrakundu.github.io/categories/python/</link>
    <description>Python - Category | Chandra Kundu | Personal Website</description>
    <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 16 Jun 2024 23:22:00 -0400</lastBuildDate><atom:link href="https://chandrakundu.github.io/categories/python/" rel="self" type="application/rss+xml" /><item>
  <title>Handling Relative Paths in Python Projects</title>
  <link>https://chandrakundu.github.io/posts/handling-relative-paths-in-python-projects/</link>
  <pubDate>Sun, 16 Jun 2024 23:22:00 -0400</pubDate>
  <author>Author</author>
  <guid>https://chandrakundu.github.io/posts/handling-relative-paths-in-python-projects/</guid>
  <description><![CDATA[Working on Python projects often requires managing complex directory structures and handling relative paths efficiently. In this blog post, we will explore common issues related to handling relative paths and provide solutions to ensure your scripts run smoothly, regardless of how and where they are executed.
Project StructureBefore diving into the details, let&rsquo;s first understand the typical structure of a Python project. A Python project usually consists of the following directories:]]></description>
</item>
</channel>
</rss>
