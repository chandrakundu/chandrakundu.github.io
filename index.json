[{"categories":null,"content":"Tmux is a powerful terminal multiplexer that allows you to manage multiple terminal sessions within a single window. This capability is incredibly useful for keeping remote servers running for days, even if you close your terminal. In this cheat sheet, we’ll cover essential commands and keyboard shortcuts to help you get started with Tmux. ","date":"2024-06-17","objectID":"/posts/tmux-guide-and-cheat-sheet/:0:0","tags":null,"title":"How to Keep Remote Servers Running with Tmux for Days Even If You Close Your Terminal","uri":"/posts/tmux-guide-and-cheat-sheet/"},{"categories":null,"content":"Why Tmux is Useful\rRun and manage multiple terminal sessions within a single window. Easily switch between them using keyboard shortcuts. Detach from a session and reattach later to pick up right where you left off. Keep processes running even after you close your terminal, ensuring uninterrupted server tasks. ","date":"2024-06-17","objectID":"/posts/tmux-guide-and-cheat-sheet/:1:0","tags":null,"title":"How to Keep Remote Servers Running with Tmux for Days Even If You Close Your Terminal","uri":"/posts/tmux-guide-and-cheat-sheet/"},{"categories":null,"content":"Installation\r","date":"2024-06-17","objectID":"/posts/tmux-guide-and-cheat-sheet/:2:0","tags":null,"title":"How to Keep Remote Servers Running with Tmux for Days Even If You Close Your Terminal","uri":"/posts/tmux-guide-and-cheat-sheet/"},{"categories":null,"content":"Ubuntu\rsudo apt-get update sudo apt-get install tmux ","date":"2024-06-17","objectID":"/posts/tmux-guide-and-cheat-sheet/:2:1","tags":null,"title":"How to Keep Remote Servers Running with Tmux for Days Even If You Close Your Terminal","uri":"/posts/tmux-guide-and-cheat-sheet/"},{"categories":null,"content":"Creating and Managing Sessions\rCreate a New Session tmux new -s session_name To attach to an existing session: tmux a -t session_name To kill a session: tmux kill-session -t session_name To list all sessions: tmux ls To exit a session: exit ","date":"2024-06-17","objectID":"/posts/tmux-guide-and-cheat-sheet/:3:0","tags":null,"title":"How to Keep Remote Servers Running with Tmux for Days Even If You Close Your Terminal","uri":"/posts/tmux-guide-and-cheat-sheet/"},{"categories":null,"content":"Keyboard Shortcuts\rNote: To use these shortcuts, press Ctrl+b first, release it, and then press the corresponding key. Ctrl-b % - Split the current pane vertically. Ctrl-b \" - Split the current pane horizontally. Ctrl-b arrow - Move between panes. Ctrl-b c - Create a new window. Ctrl-b n - Move to the next window. Ctrl-b p - Move to the previous window. Ctrl-b d - Detach from the current session. ctrl-b 0-9 - Move to the window number 0-9. Ctrl-b l - Move to the previously selected window. Ctrl-b w - List all windows. Ctrl-b \u0026 - Kill the current window. Ctrl-b , - Rename the current window. ctrl-b space - Toggle between pane layouts. Ctrl-b ! - Convert the current pane into a window. Ctrl-b x - Close the current pane. Ctrl-b o - Switch to the next pane. Ctrl-b z - Toggle pane zoom. Ctrl-b q - Show pane numbers (used to switch between panes). Ctrl-b ? - List all keybindings. ","date":"2024-06-17","objectID":"/posts/tmux-guide-and-cheat-sheet/:4:0","tags":null,"title":"How to Keep Remote Servers Running with Tmux for Days Even If You Close Your Terminal","uri":"/posts/tmux-guide-and-cheat-sheet/"},{"categories":null,"content":"Customizing Tmux: Mouse Scrolling, Status Bar, and More\rYou can customize Tmux by editing the configuration file located at ~/.tmux.conf. Here are a few examples of customizations: # Enable mouse scrolling set -g mouse on # Enable two prefix keys set-option -g prefix C-a unbind-key C-b bind-key C-a send-prefix # Set the status bar to display in the bottom set-option -g status-position bottom # Set the status bar colors set-option -g status-style fg=white,bg=black # Customize the window list format set-option -g window-status-format \" #[fg=yellow]#I:#W#[fg=default]\" # Set the window list colors set-option -g window-status-current-style fg=black,bg=yellow # Customize the pane border colors set-option -g pane-active-border-style fg=green set-option -g pane-border-style fg=default # Set the default shell set-option -g default-shell \"/bin/bash\" These are just a few examples of customizations you can make to your Tmux configuration. Feel free to explore the Tmux manual and experiment with different settings to suit your preferences. Remember to save the changes to your ~/.tmux.conf file and restart your Tmux session for the new settings to take effect. With these essential commands, keyboard shortcuts, and customization options, you’ll be able to enhance your productivity and efficiently manage multiple terminal sessions using Tmux. This approach ensures that your remote servers and processes can continue running seamlessly, even if you disconnect from your terminal. Enjoy using Tmux! ","date":"2024-06-17","objectID":"/posts/tmux-guide-and-cheat-sheet/:5:0","tags":null,"title":"How to Keep Remote Servers Running with Tmux for Days Even If You Close Your Terminal","uri":"/posts/tmux-guide-and-cheat-sheet/"},{"categories":null,"content":"Working on Python projects often requires managing complex directory structures and handling relative paths efficiently. In this blog post, we will explore common issues related to handling relative paths and provide solutions to ensure your scripts run smoothly, regardless of how and where they are executed. ","date":"2024-06-16","objectID":"/posts/handling-relative-paths-in-python-projects/:0:0","tags":null,"title":"Handling Relative Paths in Python Projects","uri":"/posts/handling-relative-paths-in-python-projects/"},{"categories":null,"content":"Project Structure\rBefore diving into the details, let’s first understand the typical structure of a Python project. A Python project usually consists of the following directories: my_project/ │ ├── src/ │ ├── __init__.py │ ├── main.py │ ├── config/ │ │ ├── __init__.py │ │ └── data_config.py │ │ │ └── utils/ │ ├── __init__.py │ └── load_data.py │ ├── data/ │ └── simple.csv │ ├── .env (put apykeys and folders) │ └── README.md In this example, the src directory contains the main Python scripts, while the data directory stores the input data files. The .env file contains sensitive information such as API keys and database credentials. The config and utils directories contain configuration files and utility scripts, respectively. ","date":"2024-06-16","objectID":"/posts/handling-relative-paths-in-python-projects/:1:0","tags":null,"title":"Handling Relative Paths in Python Projects","uri":"/posts/handling-relative-paths-in-python-projects/"},{"categories":null,"content":"VSCode Workspace Setup\rAdd a .env file to the root directory of your project with the following content: PYTHONPATH=path_to_project_folder/ For instance, if path_to_project_folder is E:\\projects\\my_project, your .env file should look like this: PYTHONPATH=E:\\projects\\my_project Additionally, add a .vscode/settings.json file with the following content: { \"terminal.integrated.env.linux\": { \"PYTHONPATH\": \"${workspaceFolder}\" } } This setup ensures that the PYTHONPATH environment variable is set to the root directory of your project when running Python scripts from VSCode. ","date":"2024-06-16","objectID":"/posts/handling-relative-paths-in-python-projects/:2:0","tags":null,"title":"Handling Relative Paths in Python Projects","uri":"/posts/handling-relative-paths-in-python-projects/"},{"categories":null,"content":"Issues with Relative Paths\rWhen working with relative paths in Python projects, you may encounter the following issues: Inconsistent Behavior: The behavior of relative paths may vary depending on the execution context. For example, running a script from the command line or an IDE may yield different results. Working Directory: The working directory from which the script is executed affects the resolution of relative paths. If the working directory changes, the relative paths may no longer point to the correct locations. Module Imports: When importing modules from different directories, you need to ensure that the paths are correctly resolved. Incorrect imports can lead to module not found errors. Deployment: When deploying your project to a different environment, such as a server or a container, you need to ensure that the paths are correctly configured to work in the new environment. ","date":"2024-06-16","objectID":"/posts/handling-relative-paths-in-python-projects/:3:0","tags":null,"title":"Handling Relative Paths in Python Projects","uri":"/posts/handling-relative-paths-in-python-projects/"},{"categories":null,"content":"A specific example of handling relative paths\rConsider the script my_project/src/utils/load_data.py: import pandas as pd df = pd.read_csv(\"data/simple.csv\") print(df.head()) When you open this file and run it using VS Code (Ctrl+F5), it should work as expected. It will also work fine if you run python my_project/src/utils/load_data.py from the project root directory. However, if you navigate to the utils folder and run python load_data.py, you’ll encounter the file not found error. To fix this issue, you can use the os module to construct the absolute path to the data file: import os import pandas as pd project_dir = os.path.join(os.path.dirname(__file__), \"..\", \"..\") data_path = os.path.join(project_dir, \"data\", \"simple.csv\") df = pd.read_csv(data_path) print(df.head()) In this modified version, we construct the absolute path to the data file by joining the directory of the current script (__file__) with the relative path to the data file. This ensures that the script can locate the data file regardless of the working directory. ","date":"2024-06-16","objectID":"/posts/handling-relative-paths-in-python-projects/:4:0","tags":null,"title":"Handling Relative Paths in Python Projects","uri":"/posts/handling-relative-paths-in-python-projects/"},{"categories":null,"content":"Generating images locally using open-source AI models is a fascinating way to leverage AI’s creative potential. Among the available tools, Invoke AI stands out due to its ease of installation and robust features. While Automatic1111 is popular, Invoke AI offers a more streamlined experience for beginners and advanced users alike. Here’s a guide to help you set up and run Invoke AI on your local Windows computer. ","date":"2024-06-12","objectID":"/posts/how-to-generate-images-locally-using-open-source-ai-models/:0:0","tags":null,"title":"How to Generate Images Locally Using Open Source AI Models","uri":"/posts/how-to-generate-images-locally-using-open-source-ai-models/"},{"categories":null,"content":"Prerequisites\rBefore diving into the installation process, ensure you have the following: Hardware Requirements: An NVIDIA-based graphics card with at least 12 GB of main memory RAM. For Stable Diffusion 1.5: At least 4 GB VRAM. For Stable Diffusion XL: At least 8 GB VRAM. Software Requirements: Python 3.11. CUDA enabled on your system. Verify CUDA installation by running nvidia-smi in the terminal. ","date":"2024-06-12","objectID":"/posts/how-to-generate-images-locally-using-open-source-ai-models/:1:0","tags":null,"title":"How to Generate Images Locally Using Open Source AI Models","uri":"/posts/how-to-generate-images-locally-using-open-source-ai-models/"},{"categories":null,"content":"Installation Steps\rDownload Invoke AI: Download the latest version of Invoke AI from the official GitHub releases page. To download v4.2.4 directly, click here. Extract the downloaded files to your desired location. Run the Installer Script: Navigate to the extracted files. Double-click on the install.bat script to begin the installation. Follow the prompts to specify an installation location and select your GPU type. Locate the Installation Directory: Once the installation is complete, find the directory you specified. The default location is C:\\Users\\Username\\invokeai for Windows. Run the Launcher Script: Navigate to the installation directory. Double-click on invoke.bat to launch Invoke AI. Start the Application: Select option 1 to start the application. Once it starts up, open your browser and go to http://localhost:9090. Install a Starter Model: Open the model manager tab within the Invoke AI interface. Install a starter model to begin generating images. You are now ready to explore the creative possibilities of AI image generation using Invoke AI. This powerful tool provides an accessible entry point for both hobbyists and professionals looking to delve into AI-driven art. Stay tuned for our next tutorial where we’ll delve deeper into using Invoke AI to create stunning images. ","date":"2024-06-12","objectID":"/posts/how-to-generate-images-locally-using-open-source-ai-models/:2:0","tags":null,"title":"How to Generate Images Locally Using Open Source AI Models","uri":"/posts/how-to-generate-images-locally-using-open-source-ai-models/"},{"categories":null,"content":"Invoke AI Tutorial\rComing soon… ","date":"2024-06-12","objectID":"/posts/how-to-generate-images-locally-using-open-source-ai-models/:3:0","tags":null,"title":"How to Generate Images Locally Using Open Source AI Models","uri":"/posts/how-to-generate-images-locally-using-open-source-ai-models/"},{"categories":null,"content":"In this post we will see that how to create a chatbot like ChatGPT by running Large Language Model (LLM) locally in Windows via Ollama and Open WebUI Creating a chatbot that runs a large language model (LLM) on your local machine can be done in several ways. Here are some methods you might consider: Using API and Programming: This approach is often difficult and time-consuming. Chatbot UI: This method requires API access from OpenAI. It’s very good if you want to use it remotely, but as of my knowledge, it may not support local model access. Ollama and Open WebUI: These can be used with APIs from OpenAI and locally stored, trained LLM models. In this post, I will discuss how we can use Ollama and Open WebUI. ","date":"2024-06-12","objectID":"/posts/how-to-create-ai-chatbot/:0:0","tags":null,"title":"How to create a chatbot like ChatGPT by running LLM locally in Windows via Ollama and Open WebUI","uri":"/posts/how-to-create-ai-chatbot/"},{"categories":null,"content":"Install Ollama\rOllama is a framework for building and running language models on a local machine. It can be used for not only chatbots but also AI assistants inside your editor like VSCode. For more information, you can explore Ollama’s blog and Continue Code Assistant. Ollama supports Nvidia and Apple’s M-series GPUs. Nvidia GPUs with at least 4 GB of memory will work, and for M-series Macs, at least 16 GB of memory is recommended. I suggests using at least a GeForce RTX 3060 Ti GPU with 8 GB GDDR6 memory. While Ollama can run in CPU-only mode, the responses may be slow or poor quality. For instance, one user reported that a smaller model, tinyllama, was able to stream responses at a normal rate but the quality was poor. Download Ollama from here and install it. Available Ollama models can be found here. To run a particular model, open the terminal and run the Ollama command. For example, to run llama3:8B, use: ollama run llama3:8B Once running, you can visit http://localhost:11434/ to confirm if Ollama is running. For additional documentation, refer to their documentation. ","date":"2024-06-12","objectID":"/posts/how-to-create-ai-chatbot/:1:0","tags":null,"title":"How to create a chatbot like ChatGPT by running LLM locally in Windows via Ollama and Open WebUI","uri":"/posts/how-to-create-ai-chatbot/"},{"categories":null,"content":"Install Open WebUI\rWe will be using Docker Desktop. Download and install Docker Desktop from here. To confirm the Docker installation, run the following command in the terminal: docker --version and it should display the Docker version. If you have an Nvidia GPU and want GPU support with the OpenAI API, use the following command: docker run -d -p 3000:8080 --gpus all --add-host=host.docker.internal:host-gateway -e OPENAI_API_KEY=openai_secret_key -v open-webui:/app/backend/data --name open-webui --restart always ghcr.io/open-webui/open-webui:cuda Remember to replace openai_secret_key with your secret key, which can be found here. If you want to install without GPU or without OpenAI API, follow the instructions provided here. Once installed, you can visit http://localhost:3000/, sign up, and start using it. ","date":"2024-06-12","objectID":"/posts/how-to-create-ai-chatbot/:2:0","tags":null,"title":"How to create a chatbot like ChatGPT by running LLM locally in Windows via Ollama and Open WebUI","uri":"/posts/how-to-create-ai-chatbot/"},{"categories":null,"content":"Installing New Models\rTo install a new model, you can use ollama run \u003cmodel name\u003e in the terminal. To find new models visit Ollama model repository. For example: ton install qwen2:0.5b which is is a new series of large language models from the Alibaba group. Now you will have the option to choose the model from the Open WebUI portal. Moreover, you can also download new models in the settings of the Open WebUI portal. ","date":"2024-06-12","objectID":"/posts/how-to-create-ai-chatbot/:3:0","tags":null,"title":"How to create a chatbot like ChatGPT by running LLM locally in Windows via Ollama and Open WebUI","uri":"/posts/how-to-create-ai-chatbot/"},{"categories":null,"content":"How to start using Open WebUI later on\rStart Ollama from the Start menu. Open Docker Desktop and run the following command in the terminal: docker start open-webui ","date":"2024-06-12","objectID":"/posts/how-to-create-ai-chatbot/:4:0","tags":null,"title":"How to create a chatbot like ChatGPT by running LLM locally in Windows via Ollama and Open WebUI","uri":"/posts/how-to-create-ai-chatbot/"},{"categories":null,"content":"Troubleshooting\rSometimes, after restarting your PC, you may encounter some port errors with Docker when starting open-webui. In such cases, delete open-webui from Docker and restart your computer. Then run: docker run -d -p 3000:8080 --gpus all --add-host=host.docker.internal:host-gateway -e OPENAI_API_KEY=openai_secret_key -v open-webui:/app/backend/data --name open-webui --restart always ghcr.io/open-webui/open-webui:cuda Now, you have a powerful local setup for running a chatbot using large language models. Enjoy! ","date":"2024-06-12","objectID":"/posts/how-to-create-ai-chatbot/:4:1","tags":null,"title":"How to create a chatbot like ChatGPT by running LLM locally in Windows via Ollama and Open WebUI","uri":"/posts/how-to-create-ai-chatbot/"},{"categories":null,"content":"LaTeX is a powerful typesetting system used extensively for scientific documents, academic papers, and any situation which requires precision in presentation. Below are some effective tips and tricks to enhance your LaTeX typesetting, ensuring consistency and clarity in your documents. ","date":"2023-11-16","objectID":"/posts/latex-tips-for-effective-typesetting/:0:0","tags":null,"title":"LaTeX Tips for Effective Typesetting","uri":"/posts/latex-tips-for-effective-typesetting/"},{"categories":null,"content":"Keeping Text Together and Box Usage\r","date":"2023-11-16","objectID":"/posts/latex-tips-for-effective-typesetting/:1:0","tags":null,"title":"LaTeX Tips for Effective Typesetting","uri":"/posts/latex-tips-for-effective-typesetting/"},{"categories":null,"content":"Ensuring Word Cohesion with mbox and fbox\rTo prevent LaTeX from breaking up text between lines or pages, you can use the \\mbox{} command, which will keep the text inside intact regardless of formatting. It’s particularly useful when dealing with text that must stay together, such as proper names or specific code snippets. My phone number will change soon. It will be \\\\mbox{0116 291 2319}. My phone number will change soon. It will be 0116 291 2319. Similarly, \\fbox{} wraps the content with a visible box, which can be helpful for highlighting information or creating distinct sections visually. \\fbox{This text is boxed.} To stop specific ligatures—two or more letters combined into a single character (ff fi fl f) —from being used, insert an \\mbox{} between the characters. shelf\\\\mbox{}ful shelfful ","date":"2023-11-16","objectID":"/posts/latex-tips-for-effective-typesetting/:1:1","tags":null,"title":"LaTeX Tips for Effective Typesetting","uri":"/posts/latex-tips-for-effective-typesetting/"},{"categories":null,"content":"Typography and Quotation Marks\rIn LaTeX, the correct way to start and end quotes is to use a grave accent ` for opening quotes and a simple vertical quote ' for closing quotes. For double quotes, use two grave accents and two vertical quotes. `single quotes' ","date":"2023-11-16","objectID":"/posts/latex-tips-for-effective-typesetting/:1:2","tags":null,"title":"LaTeX Tips for Effective Typesetting","uri":"/posts/latex-tips-for-effective-typesetting/"},{"categories":null,"content":"Word Separation with slash\rUsing \\slash allows you to correctly separate words, particularly useful in compound words that require a “read or write” representation. read\\slash write read\\write ","date":"2023-11-16","objectID":"/posts/latex-tips-for-effective-typesetting/:1:3","tags":null,"title":"LaTeX Tips for Effective Typesetting","uri":"/posts/latex-tips-for-effective-typesetting/"},{"categories":null,"content":"Math Expressions in LaTeX\r","date":"2023-11-16","objectID":"/posts/latex-tips-for-effective-typesetting/:2:0","tags":null,"title":"LaTeX Tips for Effective Typesetting","uri":"/posts/latex-tips-for-effective-typesetting/"},{"categories":null,"content":"Roman Letters in Equations\rTo use Roman letters within an equation, you should use the \\mathrm{} directive. \\int\\_{0}^{\\infty} x\\^{}2 \\\\mathrm{e}\\^{-x} \\\\mathrm{d}x $$\\int_{0}^{\\infty} x^{2} \\mathrm{e}^{-x} \\mathrm{d}x$$ ","date":"2023-11-16","objectID":"/posts/latex-tips-for-effective-typesetting/:2:1","tags":null,"title":"LaTeX Tips for Effective Typesetting","uri":"/posts/latex-tips-for-effective-typesetting/"},{"categories":null,"content":"Ellipsis Representations\rLaTeX offers different types of ellipsis () representations: \\ldots for a horizontal ellipsis in text. ($\\ldots$) \\cdots for centered ellipsis dots in math mode. ($\\cdots$) \\vdots for vertical ellipsis dots in math mode. ($\\vdots$) \\ddots for diagonal ellipsis dots in math mode. ($\\ddots$) \\cdot for a single centered dot in math mode. ($\\cdot$) ","date":"2023-11-16","objectID":"/posts/latex-tips-for-effective-typesetting/:2:2","tags":null,"title":"LaTeX Tips for Effective Typesetting","uri":"/posts/latex-tips-for-effective-typesetting/"},{"categories":null,"content":"Spacing and Non-Breaking in LaTeX\rThe tilde character ~ in LaTeX creates a non-breakable space, ensuring that certain elements stay together. This generates a space that cannot be enlarged and additionally prohibits a line break. Dr.~Dre Dr. Dre When using \\@ before a period, LaTeX understands the period as the end of a sentence even if it is preceded by an uppercase letter. PROF.~SMITH WAS HAPPY TO SEE HER \\@. PROF. SMITH WAS HAPPY TO SEE HER. ","date":"2023-11-16","objectID":"/posts/latex-tips-for-effective-typesetting/:2:3","tags":null,"title":"LaTeX Tips for Effective Typesetting","uri":"/posts/latex-tips-for-effective-typesetting/"},{"categories":null,"content":"In-Line Math Expressions\rWhen typesetting in-line math expressions that are tall or deep, the \\smash{} command can help avoid irregular spacing in the surrounding text. A $d_{e_{e_p}}$ mathematical\rexpression followed by a $h^{i^{g^h}}$ expression. As opposed to a smashed \\smash{$d_{e_{e_p}}$} expression followed by a \\smash{$h^{i^{g^h}}$} expression.\rA $d_{e_{e_p}}$ mathematical expression followed by a $h^{i^{g^h}}$ expression. As opposed to a smashed \\smash{$d_{e_{e_p}}$} expression followed by a \\smash{$h^{i^{g^h}}$} expression. The example above is not correct and cannot be displayed in the browser. ","date":"2023-11-16","objectID":"/posts/latex-tips-for-effective-typesetting/:2:4","tags":null,"title":"LaTeX Tips for Effective Typesetting","uri":"/posts/latex-tips-for-effective-typesetting/"},{"categories":null,"content":"Displaying Fractions\rUsing \\frac{numerator}{denominator} you can display fractions. For in-line equations, fractions will be resized to fit the line, but you can use \\dfrac{} for a display-size fraction within text. $1\\frac{1}{2}$~hours $\\qquad 1\\dfrac{1}{2}$~hours $1\\frac{1}{2}$ hours $\\qquad 1\\dfrac{1}{2}$ hours. The slashed form 1/2 is often preferable for simple fractions due to its clarity and the fact that it takes less vertical space. \\tfrac{1}{2} can be used in equation mode to shrink the size of the fraction. \\begin{equation*}\r3/8 \\qquad \\frac{3}{8}\r\\qquad \\tfrac{3}{8}\r\\end{equation*}$$3/8 \\qquad \\frac{3}{8} \\qquad \\tfrac{3}{8}$$ ","date":"2023-11-16","objectID":"/posts/latex-tips-for-effective-typesetting/:2:5","tags":null,"title":"LaTeX Tips for Effective Typesetting","uri":"/posts/latex-tips-for-effective-typesetting/"},{"categories":null,"content":"Referencing Equations\rInside the equation environment, you can label an equation with \\label{} and refer to it anywhere in the text using \\eqref{}. \\begin{equation}\rE = mc^2 \\label{eq:energy\\_mass}\r\\end{equation}As shown in equation \\eqref{eq:energy\\_mass} … If you want to assign a custom name to an equation, use \\tag{} instead. ","date":"2023-11-16","objectID":"/posts/latex-tips-for-effective-typesetting/:2:6","tags":null,"title":"LaTeX Tips for Effective Typesetting","uri":"/posts/latex-tips-for-effective-typesetting/"},{"categories":null,"content":"Underlines and Overlines\rTo create horizontal lines over or under expressions, use \\overline{} and \\underline{} respectively. \\\\underline{x+y} $$\\underline{x+y}$$ For double underlines, you can stack the command: \\\\underline{\\\\underline{x+y}} $$\\underline{\\underline{x+y}}$$ ","date":"2023-11-16","objectID":"/posts/latex-tips-for-effective-typesetting/:2:7","tags":null,"title":"LaTeX Tips for Effective Typesetting","uri":"/posts/latex-tips-for-effective-typesetting/"},{"categories":null,"content":"Advanced Mathematical Customizations\rLaTeX also offers commands for more advanced operations: \\stackrel{#1}{#2}: Places a symbol over another in superscript size. f_n(x) \\stackrel{*}{\\approx} 1 $f_n(x) \\stackrel{*}{\\approx} 1$ \\DeclareMathOperator: Declares a new operator (must be used in the preamble). \\DeclareMathOperator{\\func}{Function} Then use \\func to display the operator. \\bmod and \\pmod: Used for modulus operations in math mode. a \\bmod b \\qquad x \\equiv a \\pmod{b} $a \\bmod b \\qquad x \\equiv a \\pmod{b}$ \\newtheorem: For defining new theorem-like environments. \\newtheorem{name}[counter]{text}[section] Here, name is the short keyword to identify the theorem, and text is the text to be displayed. The optional section argument allows you to define the sectional unit that the theorem will be numbered with. the counter argument to specify the name of a previously declared “theorem”. The new “theorem” will then be numbered in the same sequence. \\newcommand: To define new, custom commands for repetitive use. \\newcommand{name}[num]{definition} Here, name and definition are required, and num is optional. If num is specified, the command will expect that number of arguments. Upto 9 arguments can be specified. #1, #2, etc. are used to refer to the arguments in the definition. \\providecommand is similar to \\newcommand, but it does nothing if the command is already defined. \\newenvironment: To define new environments. \\newenvironment{name}[num]{before}{after} Here, name is the name of the environment, before is the text to be printed before the environment, and after is the text to be printed after the environment. If num is specified, the environment will expect that number of arguments. Upto 9 arguments can be specified. #1, #2, etc. are used to refer to the arguments in the definition. \\ignorespacesafterend and \\ignorespaces are useful commands to ignore spaces after the environment. \\newenvironment{myenvironment}{\\begin{center}}{\\end{center}} Read 6.1.5 of the source for more information about creating package. ","date":"2023-11-16","objectID":"/posts/latex-tips-for-effective-typesetting/:3:0","tags":null,"title":"LaTeX Tips for Effective Typesetting","uri":"/posts/latex-tips-for-effective-typesetting/"},{"categories":null,"content":"Adjusting Spacing\r","date":"2023-11-16","objectID":"/posts/latex-tips-for-effective-typesetting/:4:0","tags":null,"title":"LaTeX Tips for Effective Typesetting","uri":"/posts/latex-tips-for-effective-typesetting/"},{"categories":null,"content":"Horizontal and Vertical Spaces\rTo manage horizontal and vertical spaces within your document, LaTeX offers various commands: \\hspace{length} and \\vspace{length}: To add space horizontally or vertically. Supported units are pt, mm, cm, in, ex, em, mu, fil, fill, and filll. pt: point (1/3 mm); em: width of the letter M in the current font; mu: math unit, 1/18 em; ex: height of the letter x in the current font. \\bigskip and \\smallskip: For predefined vertical skipping. Additional space between two lines of the same paragraph or within a table is specified with the \\\\[length] command. \\!, \\,, \\quad, and \\qquad: For fine-tuning spacing in math mode. Flexible spacing can be achieved with \\stretch{n} which expands to fill all available space. ","date":"2023-11-16","objectID":"/posts/latex-tips-for-effective-typesetting/:4:1","tags":null,"title":"LaTeX Tips for Effective Typesetting","uri":"/posts/latex-tips-for-effective-typesetting/"},{"categories":null,"content":"Changing Line Spacing\rTo modify line spacing, use \\setlength{\\baselineskip} followed by a scaling factor. \\setlength{\\baselineskip}{1.5\\baselineskip} Source: The Not So Short Introduction to LaTeX2e http://tug.ctan.org/info/lshort/english/lshort.pdf ","date":"2023-11-16","objectID":"/posts/latex-tips-for-effective-typesetting/:4:2","tags":null,"title":"LaTeX Tips for Effective Typesetting","uri":"/posts/latex-tips-for-effective-typesetting/"},{"categories":null,"content":"Hugo is a popular open-source static site generator (SSG) that’s known for its speed, flexibility, and ease of use. In this post, I’ll walk you through the process of creating a website using Hugo on Windows. ","date":"2023-10-01","objectID":"/posts/creating-website-with-hugo-on-windows/:0:0","tags":null,"title":"Create Website with Blog using Hugo on Windows","uri":"/posts/creating-website-with-hugo-on-windows/"},{"categories":null,"content":"Installing Hugo\r","date":"2023-10-01","objectID":"/posts/creating-website-with-hugo-on-windows/:1:0","tags":null,"title":"Create Website with Blog using Hugo on Windows","uri":"/posts/creating-website-with-hugo-on-windows/"},{"categories":null,"content":"Using winget\rInstall Hugo: Open PowerShell as an administrator. Run winget install Hugo. Verify Installation: Run hugo version in PowerShell to verify the installation. ","date":"2023-10-01","objectID":"/posts/creating-website-with-hugo-on-windows/:1:1","tags":null,"title":"Create Website with Blog using Hugo on Windows","uri":"/posts/creating-website-with-hugo-on-windows/"},{"categories":null,"content":"Manual Installation\rDownload Hugo: To install Hugo, you can clone the repository: git clone https://github.com/gohugoio/hugo.git. Alternatively, for the latest release, visit Hugo Releases. Download the appropriate version and extract hugo.exe. Set Up Hugo: Place hugo.exe in a preferred location, such as C:\\hugo\\bin. Add the path of hugo.exe to your system’s environment variables. Verify Installation: Open PowerShell and run hugo version to verify the installation. Alternative Setup: If you prefer, you can keep hugo.exe in your project directory. In this case, use .\\hugo version to check the version. ","date":"2023-10-01","objectID":"/posts/creating-website-with-hugo-on-windows/:1:2","tags":null,"title":"Create Website with Blog using Hugo on Windows","uri":"/posts/creating-website-with-hugo-on-windows/"},{"categories":null,"content":"Creating a Website\rInitiate a New Website: Run hugo new site \u003cwebsite-name\u003e to create a new folder named \u003cwebsite-name\u003e. Choose a Theme: Visit Hugo Themes to download a theme of your choice. Extract the theme and place it in the \u003cwebsite-name\u003e/themes folder. Configure the Website: Edit the config.toml file inside your \u003cwebsite-name\u003e folder. You can use this sample config file as reference. baseURL = 'https://www.example.com/' # provide valid url languageCode = 'en-us' title = 'Website Name' theme = \"hermit\" Preview the Site: Run hugo server to preview the website locally. Even if you provide a baseURL for a remote host, it will run locally. Generate the Static Website: Create a folder named public. Run hugo -t \u003ctheme-name\u003e to generate the static website, which will be stored in the public folder. Deploy the Website: Transfer the files from the public directory to the public directory of your chosen web hosting service. ","date":"2023-10-01","objectID":"/posts/creating-website-with-hugo-on-windows/:2:0","tags":null,"title":"Create Website with Blog using Hugo on Windows","uri":"/posts/creating-website-with-hugo-on-windows/"},{"categories":null,"content":"Creating a Post or Page\rTo create a new post, run hugo new posts/.md. This will create a markdown file for your post in the content/posts folder. Edit the markdown file to add your content using your preferred text editor. To create a new page, run hugo new .md. The markdown file will be created in the content folder. Again, edit the markdown file to add content for your page. Font Awesome icons can be added using :(fas fa-\u003cicon-name\u003e fa-fw): When linking images in your markdown file in relation to your post, take into account the structure of the leaf bundle directory, as shown below. content \\__posts | \\__post_about_blah | | |--index.md | | |--picture_1.jpg | | \\__images | | | |--picture_2.jpg | | | |--picture_3.jpg | \\__blah_blah_post | | |--index.md | | |--picture_1.jpg | | \\__images | | | |--picture_2.jpg | | | |--picture_3.jpg ","date":"2023-10-01","objectID":"/posts/creating-website-with-hugo-on-windows/:3:0","tags":null,"title":"Create Website with Blog using Hugo on Windows","uri":"/posts/creating-website-with-hugo-on-windows/"},{"categories":null,"content":"Hosting Hugo Website on GitHub Pages\rCreate a GitHub Repository: Create a new repository on GitHub with the name \u003cusername\u003e.github.io. Initialize Git: Run git init in your project directory. Add the GitHub repository as a remote: `git remote add origin Generate the Website: Run hugo -t \u003ctheme-name\u003e to generate the static website. Push to GitHub: Push the generated files to the GitHub repository: git push -u origin main. Enable GitHub Pages: Go to the repository settings on GitHub. Under the GitHub Pages section, select the main branch as the source. Access the Website: Visit https://\u003cusername\u003e.github.io to access your Hugo website. ","date":"2023-10-01","objectID":"/posts/creating-website-with-hugo-on-windows/:4:0","tags":null,"title":"Create Website with Blog using Hugo on Windows","uri":"/posts/creating-website-with-hugo-on-windows/"},{"categories":null,"content":"Hugo FixIt Themes Installation\rHugo offers a wide range of themes that you can use to customize your website. One of my favorite themes is LoverIt, which offers a clean and modern design. However, there is a bug-fixed version of LoverIt called FixIt. To use the FixIt theme, you can follow these steps: Clone the FixIt repository into the themes folder of your Hugo project. git clone git clone https://github.com/hugo-fixit/FixIt.git themes/FixIt To use the FixIt theme, update the theme field in your config.toml file. theme = \"FixIt\" Run hugo server to preview your website with the FixIt theme. To generate the static website with the FixIt theme, run hugo -t FixIt. Push the changes to your GitHub repository to update your website with the FixIt theme. ","date":"2023-10-01","objectID":"/posts/creating-website-with-hugo-on-windows/:5:0","tags":null,"title":"Create Website with Blog using Hugo on Windows","uri":"/posts/creating-website-with-hugo-on-windows/"},{"categories":null,"content":"Hello, I’m Chandra. In my journey as a data aficionado, I see data not merely as numbers and graphs, but as a canvas for crafting compelling narratives that unveil valuable insights and address real-world problems. Think of it as a magical show where data takes center stage, and we’re the magicians pulling the strings. As a data magician, my magic wand comprises trusty programming languages — Python, R, and Matlab — that empower me to summon and manipulate the mystical essence of data. Much like an alchemist delicately crafts their elixir, I handle data with precision and care, knowing that with the right blend of algorithms and techniques, it can be transformed into something truly valuable. Yet, the true magic doesn’t just in the tools, but in the storytelling. I excel in narrating compelling tales through intuitive and engaging visualizations. Every chart, every graph, whispers a story of opportunities and strategies. As an instructor of record at the Department of Statistics and Data Science at the University of Central Florida and a PhD candidate in Big Data analytics, I am passionate about sharing my love of data and storytelling with others. I guide students on their own alchemical journeys, teaching them the art of data transformation, the impact of visualization, and the wisdom of insightful storytelling. ","date":"0001-01-01","objectID":"/about/:0:0","tags":null,"title":"About","uri":"/about/"}]