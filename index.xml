<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>Chandra Kundu | Personal Website</title>
    <link>https://chandrakundu.github.io/</link>
    <description>PhD Student at University of Central Florida</description>
    <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 16 Jun 2024 23:22:00 -0400</lastBuildDate>
      <atom:link href="https://chandrakundu.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
  <title>Handling Relative Paths in Python Projects</title>
  <link>https://chandrakundu.github.io/posts/handling-relative-paths-in-python-projects/</link>
  <pubDate>Sun, 16 Jun 2024 23:22:00 -0400</pubDate>
  <author>Author</author>
  <guid>https://chandrakundu.github.io/posts/handling-relative-paths-in-python-projects/</guid>
  <description><![CDATA[<div class="featured-image"><img loading="eager" src="invoke-ai.png" alt="Handling Relative Paths in Python Projects" title="Handling Relative Paths in Python Projects" referrerpolicy="no-referrer"/></div>Working on Python projects often requires managing complex directory structures and handling relative paths efficiently. In this blog post, we will explore common issues related to handling relative paths and provide solutions to ensure your scripts run smoothly, regardless of how and where they are executed.
Project StructureBefore diving into the details, let&rsquo;s first understand the typical structure of a Python project. A Python project usually consists of the following directories:]]></description>
</item>
<item>
  <title>How to Generate Images Locally Using Open Source AI Models</title>
  <link>https://chandrakundu.github.io/posts/how-to-generate-images-locally-using-open-source-ai-models/</link>
  <pubDate>Wed, 12 Jun 2024 00:37:12 -1200</pubDate>
  <author>Author</author>
  <guid>https://chandrakundu.github.io/posts/how-to-generate-images-locally-using-open-source-ai-models/</guid>
  <description><![CDATA[<div class="featured-image"><img loading="eager" src="invoke-ai.png" alt="How to Generate Images Locally Using Open Source AI Models" title="How to Generate Images Locally Using Open Source AI Models" referrerpolicy="no-referrer"/></div>Generating images locally using open-source AI models is a fascinating way to leverage AI&rsquo;s creative potential. Among the available tools, Invoke AI stands out due to its ease of installation and robust features. While Automatic1111 is popular, Invoke AI offers a more streamlined experience for beginners and advanced users alike. Here&rsquo;s a guide to help you set up and run Invoke AI on your local Windows computer.
PrerequisitesBefore diving into the installation process, ensure you have the following:]]></description>
</item>
<item>
  <title>How to create a chatbot like ChatGPT by running LLM locally in Windows via Ollama and Open WebUI</title>
  <link>https://chandrakundu.github.io/posts/how-to-create-ai-chatbot/</link>
  <pubDate>Wed, 12 Jun 2024 00:37:12 -0400</pubDate>
  <author>Author</author>
  <guid>https://chandrakundu.github.io/posts/how-to-create-ai-chatbot/</guid>
  <description><![CDATA[<div class="featured-image"><img loading="eager" src="https://miro.medium.com/v2/resize:fit:1100/format:webp/1*fot7Pg4wbBALlLQzQBzumQ.png" alt="How to create a chatbot like ChatGPT by running LLM locally in Windows via Ollama and Open WebUI" title="How to create a chatbot like ChatGPT by running LLM locally in Windows via Ollama and Open WebUI" referrerpolicy="no-referrer"/></div>In this post we will see that how to create a chatbot like ChatGPT by running Large Language Model (LLM) locally in Windows via Ollama and Open WebUI
Creating a chatbot that runs a large language model (LLM) on your local machine can be done in several ways. Here are some methods you might consider:
Using API and Programming: This approach is often difficult and time-consuming. Chatbot UI: This method requires API access from OpenAI.]]></description>
</item>
<item>
  <title>LaTeX Tips for Effective Typesetting</title>
  <link>https://chandrakundu.github.io/posts/latex-tips-for-effective-typesetting/</link>
  <pubDate>Thu, 16 Nov 2023 20:53:47 -0500</pubDate>
  <author>Author</author>
  <guid>https://chandrakundu.github.io/posts/latex-tips-for-effective-typesetting/</guid>
  <description><![CDATA[<div class="featured-image"><img loading="eager" src="latex_cover_photo.png" alt="LaTeX Tips for Effective Typesetting" title="LaTeX Tips for Effective Typesetting" referrerpolicy="no-referrer"/></div>LaTeX is a powerful typesetting system used extensively for scientific documents, academic papers, and any situation which requires precision in presentation. Below are some effective tips and tricks to enhance your LaTeX typesetting, ensuring consistency and clarity in your documents.
Keeping Text Together and Box UsageEnsuring Word Cohesion with mbox and fboxTo prevent LaTeX from breaking up text between lines or pages, you can use the \mbox{} command, which will keep the text inside intact regardless of formatting.]]></description>
</item>
<item>
  <title>Create Website with Blog using Hugo on Windows</title>
  <link>https://chandrakundu.github.io/posts/creating-website-with-hugo-on-windows/</link>
  <pubDate>Sun, 01 Oct 2023 00:37:12 -0400</pubDate>
  <author>Author</author>
  <guid>https://chandrakundu.github.io/posts/creating-website-with-hugo-on-windows/</guid>
  <description><![CDATA[<div class="featured-image"><img loading="eager" src="hugo_cover.webp" alt="Create Website with Blog using Hugo on Windows" title="Create Website with Blog using Hugo on Windows" referrerpolicy="no-referrer"/></div>Hugo is a popular open-source static site generator (SSG) that&rsquo;s known for its speed, flexibility, and ease of use. In this post, I&rsquo;ll walk you through the process of creating a website using Hugo on Windows.
Installing HugoUsing wingetInstall Hugo:
Open PowerShell as an administrator. Run winget install Hugo. Verify Installation:
Run hugo version in PowerShell to verify the installation. Manual InstallationDownload Hugo:
To install Hugo, you can clone the repository: git clone https://github.]]></description>
</item>
</channel>
</rss>
